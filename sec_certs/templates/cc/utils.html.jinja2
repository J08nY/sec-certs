{% macro keywords_card(keyword_scan, doc_prefix, card_id, card_name, keyword_sources, hidden, map_funcs) %}
	{% set ns = namespace(render=False) %}
	{% for heading, keyword in keyword_sources.items() %}
		{% if keyword not in hidden and keyword_scan[keyword] %}
			{% set ns.render = True %}
		{% endif %}
	{% endfor %}
	{% if ns.render %}
		<div class="card mt-1">
			<div class="card-header" id="{{ doc_prefix }}-{{ card_id }}-head">
			<h4 class="mb-0">
				<button class="btn btn-link" data-toggle="collapse" data-target="#{{ doc_prefix }}-{{ card_id }}-card" aria-expanded="false" aria-controls="{{ doc_prefix }}-{{ card_id }}-card">
				{{ card_name }}
				</button>
			</h4>
			</div>

			<div id="{{ doc_prefix }}-{{ card_id }}-card" class="collapse" aria-labelledby="{{ doc_prefix }}-{{ card_id }}-head">
			<div class="card-body">
				{% for heading, keyword in keyword_sources.items() %}
					{% if keyword not in hidden and keyword_scan[keyword] %}
						<h5 class="mt-2">{{ heading }}</h5>
						{{ double_join(keyword_scan[keyword], map_func=map_funcs.get(keyword, None)) }}
					{% endif %}
				{% endfor %}
			</div>
			</div>
		</div>
	{% endif %}
{% endmacro %}

{% macro cryptography_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
	{{ keywords_card(keyword_scan, doc_prefix, "crypto", "Cryptography", {"Algorithms": "rules_crypto_algs",
																		  "Engines": "rules_crypto_engines",
																		  "Libraries": "rules_crypto_libraries",
																		  "Elliptic Curves": "rules_ecc_curves",
																		  "Block cipher modes": "rules_block_cipher_modes"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro device_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
	{{ keywords_card(keyword_scan, doc_prefix, "device", "Device", {"Device ID": "rules_device_id",
																	"JavaCard": "rules_javacard",
																	"OS": "rules_os",
																	"CPLC": "rules_cplc",
																	"IC data groups": "rules_IC_data_groups",
																	"Vendor": "rules_vendor"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro security_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
	{{ keywords_card(keyword_scan, doc_prefix, "security", "Security", {"Protection profiles": "rules_protection_profiles",
																		"Security Assurance Requirements (SAR)": "rules_security_assurance_components",
																		"Security Functional Requirements (SFR)": "rules_security_functional_components",
																		"Security level": "rules_security_level"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro other_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
	{{ keywords_card(keyword_scan, doc_prefix, "other", "Other", {"Standards": "rules_standard_id",
																  "Technical reports": "rules_technical_reports"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro double_join(rule_dict, separator=", ", map_func=None) %}
	{% for value in rule_dict.values() %}
		{% for inside in value.keys() %}
			{% if map_func %}
				{{ map_func(inside) }}
			{% else %}
				{{ inside }}
			{% endif %}
			{%- if not loop.last -%}{{ separator }}{%- endif -%}
		{% endfor %}
		{%- if not loop.last -%}{{ separator }}{%- endif -%}
	{% endfor %}
{%- endmacro %}

{% macro render_status(status) %}
	{% if status == "active" %}
	<span class="text-success"><i class="fas fa-check-square"></i> active</span>
	{% elif status == "archived" %}
	<span class="text-warning"><i class="fas fa-times-circle"></i> archived</span>
	{% else %}
	<span>{{ status }}</span>
	{% endif %}
{%- endmacro %}

{% macro render_category(category) %}
<span title="{{ category }}">
{% if category == "Access Control Devices and Systems" %}
	<i class="fas fa-fw fa-id-card-alt"></i>
{% elif category == "Biometric Systems and Devices" %}
	<i class="fas fa-fw fa-fingerprint"></i>
{% elif category == "Boundary Protection Devices and Systems" %}
	<i class="fas fa-fw fa-door-closed"></i>
{% elif category == "Databases" %}
	<i class="fas fa-fw fa-database"></i>
{% elif category == "Data Protection" %}
	<i class="fas fa-fw fa-shield-alt"></i>
{% elif category == "Detection Devices and Systems" %}
	<i class="fas fa-fw fa-eye"></i>
{% elif category == "ICs, Smart Cards and Smart Card-Related Devices and Systems" %}
	<i class="fas fa-fw fa-credit-card"></i>
{% elif category == "Key Management Systems" %}
	<i class="fas fa-fw fa-key"></i>
{% elif category == "Mobility" %}
	<i class="fas fa-fw fa-car"></i>
{% elif category == "Multi-Function Devices" %}
	<i class="fas fa-fw fa-server"></i>
{% elif category == "Network and Network-Related Devices and Systems" %}
	<i class="fas fa-fw fa-network-wired"></i>
{% elif category == "Operating Systems" %}
	<i class="fas fa-fw fa-desktop"></i>
{% elif category == "Other Devices and Systems" %}
	<i class="fas fa-fw fa-square"></i>
{% elif category == "Products for Digital Signatures" %}
	<i class="fas fa-fw fa-signature"></i>
{% elif category == "Trusted Computing" %}
	<i class="fas fa-fw fa-microchip"></i>
{% endif %}
</span>
{%- endmacro %}

{% macro render_sfrs(sfr) %}
	{% if get_cc_sfr(sfr) %}
		<abbr title="{{ get_cc_sfr(sfr) }}">{{ sfr }}</abbr>
	{% else %}
		{{ sfr }}
	{% endif %}
{%- endmacro %}

{% macro render_sars(sar) %}
	{% if get_cc_sar(sar) %}
		<abbr title="{{ get_cc_sar(sar) }}">{{ sar }}</abbr>
	{% else %}
		{{ sar }}
	{% endif %}
{%- endmacro %}

{% macro render_network(network, width=600, height=600, linkDistance=20, linkCharge=-70, forceCenter=False, highlight=[]) %}
    <style>
        #network {
            width: 100%;
            margin: auto;
        }
    </style>
	<div id="network"></div>
	<script>
    function renderNetwork(data, highlighted) {
        let height = {{ height }};
        let width = {{ width }};
        let color = d => {
            if (highlighted.includes(d.id)) {
                return "#d62728"
            } else {
                return "#1f77b4"
            }
        }
        let drag = simulation => {
            function dragstarted(event) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }

            function dragged(event, d) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }

            function dragended(event) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;
            }

            return d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended);
        }

        const links = data.links.map(d => Object.create(d));
        const nodes = data.nodes.map(d => Object.create(d));

        const simulation = d3.forceSimulation(nodes)
          .force("link", d3.forceLink(links).id(d => d.id).distance({{ linkDistance }}).strength(1))
          .force("charge", d3.forceManyBody().strength({{ linkCharge }}))
          .force("x", d3.forceX(width/2))
          .force("y", d3.forceY(height/2));

        const zoom = d3.zoom().extent([[0, 0], [width, height]]).scaleExtent([0.25, 4]).on("zoom", zoomed);

        const svg = d3.create("svg")
            .attr("viewBox", [0, 0, width, height])
            .style("font", "12px");

        svg.append("defs").selectAll("marker")
            .data(["default"])
            .join("marker")
            .attr("id", d => d)
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 18)
            .attr("refY", 0)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
            .append("path")
            .attr("fill", "#999")
            .attr("fill-opacity", 0.6)
            .attr("d", "M0,-5L10,0L0,5");

        const g = svg.append("g");

        const link = g.append("g")
            .attr("stroke", "#999")
            .attr("stroke-opacity", 0.6)
            .selectAll("line")
            .data(links)
            .join("line")
            .attr("stroke-width", d => Math.sqrt(d.value))
            .attr("marker-end", "url(" + new URL("#default", location) + ")");

        const node = g.append("g")
            .selectAll("g")
            .data(nodes)
            .join("g")
            .call(drag(simulation));

        node.append("a")
            .attr("href", d => d.href)
            .append("circle")
            .attr("r", 5)
            .attr("stroke", "#fff")
            .attr("stroke-width", 1.5)
            .attr("fill", color);

        const text = node.append("text")
            .attr("x", 8)
            .attr("y", "0.31em")
            .attr("fill", "#000")
            .attr("visibility", "hidden");

        text.append("tspan")
            .text(d => d.certid);

        text.append("tspan")
            .attr("x", 8)
            .attr("y", "-0.6em")
            .text(d => d.name);

        svg.call(zoom).call(zoom.transform, d3.zoomIdentity);

        function zoomed({transform}) {
            g.attr("transform", transform);
        }

        let closest = null;

        svg.on("mousemove", event => {
            let transform = d3.zoomTransform(g.node());
            let ptr = d3.pointer(event, svg.node());
            ptr = transform.invert(ptr);
            let x = ptr[0];
            let y = ptr[1];
            let newClosest = simulation.find(x, y);
            if (newClosest !== closest) {
                node.each(function (d, i) {
                    if (i === newClosest.index) {
                        d3.select(this).select("text").attr("visibility", null);
                        d3.select(this).select("circle").attr("stroke", "#000");
                    } else if (closest !== null && i === closest.index) {
                        d3.select(this).select("text").attr("visibility", "hidden");
                        d3.select(this).select("circle").attr("stroke", "#fff");
                    }
                });
                closest = newClosest;
            }
        });

        simulation.on("tick", () => {
            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);

            node
                .attr("transform", d => d3.zoomIdentity.translate(d.x, d.y));
        });

        d3.select("#network").append(() => svg.node());
    }

	let data = JSON.parse('{{ network|tojson }}');
    let highlighted = {{ highlight }};
	if (("nodes" in data) && ("links" in data)) {
        renderNetwork(data, highlighted);
    }
	</script>
{%- endmacro %}

{% macro render_pagination(pagination, certs, search=False) %}
    <div id="pagination">
    {% if search %}
        {{ pagination.info }}
    {% endif %}
    <div class="mt-4 mb-4">
		{{ pagination.links }}
	</div>
	<table class="border mb-4">
		<col style="width:70%">
		<col style="width:10%">
		<col style="width:10%">
		<col style="width:10%">
		<thead>
			<tr class="border-bottom">
				<th class="pl-1">Name</th>
				<th>Status</th>
				<th>Certification date</th>
				<th>Archive date</th>
			</tr>
		</thead>
	{% for name, hashid, status, cert_date, archive_date, category in certs %}
		<tr>
		<td class="pl-1">{{ render_category(category) }}&nbsp;<a href="{{ url_for('.entry', hashid=hashid) }}">{{ name }}</a></td>
		<td>{{ render_status(status) }}</td>
		<td>{{ cert_date }}</td>
		<td>{{ archive_date }}</td>
		</tr>
	{% endfor %}
	</table>
	<div class="mb-4">
		{{ pagination.links }}
	</div>
    </div>
{%- endmacro %}