<head>
    {% block head %}
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <meta name="application-name" content="sec-certs.org"/>
        {% block title %}<title>{{ title|default("sec-certs.org") }}</title>{% endblock %}
        {% block metadata %}
            <meta property="og:title" content="{{ title|default("sec-certs.org") }}"/>
            <meta property="og:description" content="{{ description|default("sec-certs.org") }}"/>
            <meta property="og:image" content="{{ url_for("static", filename="img/card.png", _external=True) }}"/>
            <meta property="og:url" content="{{ request.url }}"/>
        {% endblock %}
        <link rel="shortcut icon" href="{{ url_for('static', filename='img/favicon.png') }}"/>
        {% if canonical %}
            <link rel="canonical" href="{{ request.base_url if canonical is true else canonical }}"/>
        {% endif %}
        {% assets output="gen/libs.css",
                "lib/bootstrap.min.css", "lib/bootstrap.colors.css", "lib/fontawesome.min.css", "lib/metropolis.css" %}
            <link rel="stylesheet" href="{{ ASSET_URL }}">
        {% endassets %}
        <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,300;0,400;0,600;0,700;1,300;1,400&display=swap"
              rel="stylesheet">
        {% assets output="gen/style.css", "base.css" %}
            <link rel="stylesheet" href="{{ ASSET_URL }}">
        {% endassets %}
        <link rel="preload" as="image" href="{{ url_for("static", filename="img/logo_dark.svg") }}">
        <script src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" async defer></script>
        {% assets output="gen/libs.js",
                "lib/jquery.min.js", "lib/bootstrap.bundle.min.js", "lib/d3.min.js", "lib/d3-legend.min.js", "lib/lodash.min.js", "lib/sentry.tracing.min.js" %}
            <script type="text/javascript" src="{{ ASSET_URL }}"></script>
        {% endassets %}
        <!-- Matomo -->
        <script type="text/javascript">
            var _paq = window._paq = window._paq || [];
            /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
            _paq.push(['trackPageView']);
            _paq.push(['enableLinkTracking']);
            _paq.push(["disableCookies"]);
            (function () {
                var u = "https://fadmin.fi.muni.cz/piwik/";
                _paq.push(['setTrackerUrl', u + 'matomo.php']);
                _paq.push(['setSiteId', '44']);
                var d = document, g = d.createElement('script'), s = d.getElementsByTagName('script')[0];
                g.type = 'text/javascript';
                g.async = true;
                g.src = u + 'matomo.js';
                s.parentNode.insertBefore(g, s);
            })();
        </script>
        <noscript><p><img src="https://fadmin.fi.muni.cz/piwik/matomo.php?idsite=44&rec=1" style="border:0;" alt=""/>
        </p></noscript>
        <!-- End Matomo Code -->
        <!-- Sentry -->
        <script>
            let envs = {
                "sec-certs.org": "production",
                "localhost.localdomain": "development"
            }
            Sentry.init({
                dsn: "{{ config['SENTRY_INGEST'] }}",
                environment: envs[window.location.hostname],
                release: "{{ get_release() }}",
                integrations: [Sentry.browserTracingIntegration({
                    beforeStartSpan: (context) => {
                        return {
                            ...context,
                            name: "{{ endpoint() }}"
                        }
                    }
                })],
                tracesSampleRate: 1.0,
            });
        </script>
        {% set stp = sentry_traceparent() %}
        {% if stp is not none %}
            <meta name="sentry-trace" content="{{ stp }}">
        {% endif %}
        {% set sb = sentry_baggage() %}
        {% if sb is not none %}
            <meta name="baggage" content="{{ sb }}">
        {% endif %}
        <!-- End Sentry -->

        <!-- Google search console and breadcrumbs -->
        <meta name="google-site-verification" content="eW6ZAStAlQUFlO_OP8odanoJp_yXBTvIqvlVScyTu3g"/>
        <meta name="google-site-verification" content="B1fKfbvUzeUC3uq6tc_gdJCqgtj1WeL2sYfnIho74MI"/>
        <script type="application/ld+json">
            {
              "@context": "https://schema.org",
              "@type": "BreadcrumbList",
              "itemListElement": [
            {%- for breadcrumb in breadcrumbs -%}
                {
                "@type": "ListItem",
                "position": {{ loop.index }},
            "name":{% if loop.last and breadcrumb_title and title %}{{ title|tojson }}{% else %}
                {{ breadcrumb.text|tojson }}{% endif %},
            "item": {{ (request.host_url[:-1] + breadcrumb.url)|tojson if breadcrumb.url else request.base_url|tojson }}
                }{{ ',' if not loop.last }}
          {%- endfor -%}
            ]
          }
        </script>
        <!-- End Google search console and breadcrumbs -->

        <script>
            (() => {
                'use strict'

                const getStoredTheme = () => localStorage.getItem('theme')
                const setStoredTheme = theme => {
                    localStorage.setItem('theme', theme);
                    localStorage.setItem('mode', theme)
                }

                const getPreferredTheme = () => {
                    const storedTheme = getStoredTheme()
                    if (storedTheme) {
                        return storedTheme
                    }

                    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
                }

                const setTheme = theme => {
                    if (theme === 'auto') {
                        document.documentElement.setAttribute('data-bs-theme', (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'))
                    } else {
                        document.documentElement.setAttribute('data-bs-theme', theme)
                    }
                }

                setTheme(getPreferredTheme())

                const showActiveTheme = (theme, focus = false) => {
                    const themeSwitcher = document.querySelector('#theme')

                    if (!themeSwitcher) {
                        return
                    }

                    const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
                    const activeIcon = document.querySelector(`[data-bs-theme-value="${theme}"] i`)
                    themeSwitcher.replaceChildren(activeIcon.cloneNode())

                    document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
                        element.classList.remove('active')
                        element.setAttribute('aria-pressed', 'false')
                    })

                    btnToActive.classList.add('active')
                    btnToActive.setAttribute('aria-pressed', 'true')

                    const themeSwitcherLabel = `(${btnToActive.dataset.bsThemeValue})`
                    themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)

                    if (focus) {
                        themeSwitcher.focus()
                    }
                }

                window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
                    const storedTheme = getStoredTheme()
                    if (storedTheme !== 'light' && storedTheme !== 'dark') {
                        setTheme(getPreferredTheme())
                    }
                })

                window.addEventListener('DOMContentLoaded', () => {
                    showActiveTheme(getPreferredTheme())

                    document.querySelectorAll('[data-bs-theme-value]')
                        .forEach(toggle => {
                            toggle.addEventListener('click', () => {
                                const theme = toggle.getAttribute('data-bs-theme-value')
                                setStoredTheme(theme)
                                setTheme(theme)
                                showActiveTheme(theme, true)
                            })
                        })
                })

                window.addEventListener('DOMContentLoaded', () => {
                    let storedEventText = localStorage.getItem("event_navbar_text");
                    let eventElement = document.getElementById("event-navbar");
                    if (eventElement === null) {
                        return;
                    }
                    let textElement = document.getElementById("event-navbar-text");

                    if (storedEventText !== textElement.textContent) {
                        eventElement.style.display = "flex";
                    }

                    let closeElement = document.getElementById("event-navbar-close");
                    closeElement.addEventListener("click", () => {
                        eventElement.style.display = "none";
                        localStorage.setItem("event_navbar_text", textElement.textContent);
                    });
                });
            })()
        </script>
    {% endblock %}
</head>